{"version":3,"sources":["redux/stateConstants.js","redux/actionConstants.js","redux/store.js","fbConfig.js","redux/actions.js","components/Thread.js","components/AddPost.js","components/ThreadList.js","components/Login.js","components/Home.js","views/App.js","reportWebVitals.js","index.js"],"names":["LOGIN_STATE","INITIAL_STATE","loginState","user","threads","threadIds","tags","viewOnly","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","VIEW_ONLY","STORE_THREADS","STORE_THREAD_IDS","STORE_TAGS","UPDATE_TAGS","ADD_REPLY","ADD_POST","createStore","state","action","type","payload","existingTags","tagId","push","postId","tag","existingThreads","post","currentThreads","updated","threadId","replies","reply","applyMiddleware","thunkMiddleware","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","firestore","view","storeThreads","storeThreadIds","updateTags","validateUser","username","password","dispatch","collection","where","get","then","querySnapshot","size","doc","docs","data","catch","error","console","log","getTags","forEach","id","storeTags","addReply","update","FieldValue","arrayUnion","updateReply","addPost","newPost","set","updateThreads","length","postTags","tagList","docList","each","includes","idx","indexOf","newTag","addTags","Thread","props","useSelector","useState","setReply","useDispatch","d","Date","clearForm","class","href","title","date","message","author","content","map","loggedIn","placeholder","aria-label","aria-describedby","value","onChange","e","text","target","onClick","toDateString","slice","firstName","lastName","AddPost","currentTags","setTitle","setMessage","setTags","noTitle","setNoTitle","className","role","htmlFor","tagsList","split","updatePost","ThreadList","current","setCurrent","setContent","setId","ids","Object","keys","currentId","i","aria-current","updateContent","editingBegun","Login","setUsername","setPassword","handleLogin","handleKeyPress","event","keyCode","preventDefault","name","onKeyUp","Home","isViewOnly","setAddPost","threadsByTag","handleThread","App","store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cccbd6bc.chunk.js","sourcesContent":["export const LOGIN_STATE = {\n    LOGGED_IN: \"logged in\",\n    LOGGED_OUT: \"logged out\",\n    INVALID_LOGIN: \"invalid login\",\n    NETWORK_ERROR: \"network error\"\n}\n\nexport const INITIAL_STATE = {\n    loginState: LOGIN_STATE.LOGGED_OUT,\n    user: -1,\n    threads: \"\",\n    threadIds: [],\n    tags: \"\",\n    viewOnly: true\n}","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const INVALID_LOGIN = \"INVALID_LOGIN\";\nexport const LOGIN_NETWORK_ERROR = \"LOGIN_NETWORK_ERROR\";\nexport const LOGOUT = \"LOGOUT\";\nexport const VIEW_ONLY = \"VIEW_ONLY\";\nexport const STORE_THREADS = \"STORE_THREADS\";\nexport const STORE_THREAD_IDS = \"STORE_THREAD_IDS\";\nexport const STORE_TAGS = \"STORE_TAGS\";\nexport const UPDATE_TAGS = \"UPDATE_TAGS\";\nexport const ADD_REPLY = \"ADD_REPLY\";\nexport const ADD_POST = \"ADD_POST\";","import {createStore, applyMiddleware} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {INITIAL_STATE,LOGIN_STATE} from \"./stateConstants\";\nimport { STORE_THREADS,UPDATE_TAGS,ADD_POST,STORE_THREAD_IDS,STORE_TAGS,ADD_REPLY,LOGIN_SUCCESS,\n    INVALID_LOGIN,LOGIN_NETWORK_ERROR,LOGOUT,VIEW_ONLY } from \"./actionConstants\";\n\nexport const rootReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                loginState: LOGIN_STATE.LOGGED_IN,\n                user: action.payload.user,\n                viewOnly: action.payload.viewOnly\n            }\n        case INVALID_LOGIN:\n            return {...state, loginState: LOGIN_STATE.INVALID_LOGIN};\n        case LOGIN_NETWORK_ERROR:\n            return {...state, loginState: LOGIN_STATE.NETWORK_ERROR};\n        case VIEW_ONLY:\n            return {...state, viewOnly: action.payload.viewOnly};\n        case STORE_THREADS:\n            return {...state, threads: action.payload.threads};\n        case STORE_THREAD_IDS:\n            return {...state, threadIds: action.payload.threadIds};\n        case STORE_TAGS:\n            return {...state, tags: action.payload.tags};\n        case UPDATE_TAGS:\n            const existingTags = {...state.tags};\n            if((action.payload.tagId) in existingTags) {\n                existingTags[action.payload.tagId].threadIds.push(action.payload.postId)\n            } else {\n                existingTags[action.payload.tagId] = \n                {   tag: action.payload.tag,\n                    threadIds: [action.payload.postId]\n                }\n            }\n            return {...state, tags: existingTags};\n        case ADD_POST:\n            const existingThreads = {...state.threads};\n            existingThreads[action.payload.postId] = action.payload.post;\n            return {...state, threads: existingThreads};\n        case ADD_REPLY:\n            const currentThreads = {...state.threads};\n            const updated = currentThreads[action.payload.threadId];\n            updated.replies.push(action.payload.reply);\n            return {...state,\n                threads:currentThreads\n            }\n        case LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCtD0j_TgV_eCP5tZ0endA9mbqRn1n8I7M\",\n    authDomain: \"assignment5-4aee9.firebaseapp.com\",\n    projectId: \"assignment5-4aee9\",\n    storageBucket: \"assignment5-4aee9.appspot.com\",\n    messagingSenderId: \"966965517465\",\n    appId: \"1:966965517465:web:cb6b9a4a56d016f8346c08\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import { LOGIN_SUCCESS, ADD_POST,UPDATE_TAGS,INVALID_LOGIN, LOGIN_NETWORK_ERROR,LOGOUT,VIEW_ONLY,STORE_THREADS,\n  STORE_THREAD_IDS,STORE_TAGS,ADD_REPLY } from \"./actionConstants\";\nimport firebase from \"../fbConfig\";\n\nconst database = firebase.firestore();\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        viewOnly: false,\n        user: user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n\nexport const viewOnly = (view) => ({\n    type: VIEW_ONLY,\n    payload: {\n        viewOnly: view\n    }\n})\n\nconst storeThreads = threads => ({\n    \n  type: STORE_THREADS,\n  payload: {\n      threads: threads\n  }\n})\n\nconst updateThreads = (postId, post) => ({\n    \n  type: ADD_POST,\n  payload: {\n      postId: postId,\n      post: post\n  }\n})\n\nexport const storeThreadIds = threadIds => ({\n  \n  type: STORE_THREAD_IDS,\n  payload: {\n      threadIds: threadIds\n  }\n})\n\nconst storeTags = (tags) => ({\n  type: STORE_TAGS,\n  payload: {\n      tags: tags\n  }\n})\n\nconst updateTags = (tagId, postId, tag) => ({\n  type: UPDATE_TAGS,\n  payload: {\n    tagId: tagId,\n    postId: postId,\n    tag: tag\n  }\n})\n\nconst updateReply = (threadId, reply) => ({\n  type: ADD_REPLY,\n  payload: {\n      threadId: threadId,\n      reply: reply\n  }\n})\n\nexport const validateUser = (username, password) => {\n  \n    return dispatch => {\n        database.collection(\"users\").where(\"username\",\"==\",username).where(\"password\",\"==\",password)\n        .get()\n        .then((querySnapshot) => {\n            if (querySnapshot.size === 1) {\n              const doc = querySnapshot.docs[0];\n              dispatch(loginSuccess(doc.data()));\n            } else {\n              dispatch(loginFail());\n            }\n        }).catch(error => {\n            console.log(\"Error logging in.\", error)\n        });\n    }\n}\n\nexport const getThreads = () => {\n    return dispatch => {\n      database.collection(\"threads\")\n        .get() \n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const threads = {};\n            querySnapshot.forEach(doc => {\n              threads[doc.id] = {\n                title:doc.data().title,\n                message:doc.data().message,\n                tags:doc.data().tags,\n                date: doc.data().date,\n                author: doc.data().author,\n                replies: doc.data().replies\n              }\n            })\n            dispatch(storeThreads(threads));\n          }\n          else {\n            console.log(\"No threads available.\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error fetching threads.\", error)\n        });\n    }\n  };\n\n  export const getTags = () => {\n    return dispatch => {\n      database.collection(\"tags\")\n        .get()  \n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const tags = {};\n            querySnapshot.forEach(doc => {\n              tags[doc.id] = {\n                tag:doc.data().tag,\n                threadIds:doc.data().threadIds\n              }\n            })\n            dispatch(storeTags(tags));\n          }\n          else {\n            console.log(\"No tags available.\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error fetching tags.\", error)\n        });\n    }\n  };\n\n  export const getThreadsByTag = (threadIds) => {\n    return dispatch => {\n      database.collection(\"threads\")\n        .get()\n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const threads = {};\n            querySnapshot.forEach(doc => {\n              if (threadIds.includes(doc.id)){\n                threads[doc.id] = {\n                  title:doc.data().title,\n                  message:doc.data().message,\n                  tags:doc.data().tags,\n                  date: doc.data().date,\n                  author: doc.data().author,\n                  replies: doc.data().replies\n                }\n              }\n            })\n            dispatch(storeThreads(threads));\n          }\n          else {\n            console.log(\"No threads available for that tag.\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error fetching tagged thread(s).\", error)\n        });\n    }\n  };\n\n  export const addReply = (reply, threadId) => {\n    return dispatch => {\n      database.collection(\"threads\").doc(threadId)\n        .update({\n          replies: firebase.firestore.FieldValue.arrayUnion(reply)\n        })\n        .then(() => {\n            dispatch(updateReply(threadId, reply));\n        })\n        .catch(error => {\n          console.log(\"Could not add the reply.\",error);\n        })\n    }\n  }\n\n  export const addTags = (postId, postTags, tags) => {\n\n    return dispatch => {\n\n        const tagList = []\n        const docList = []\n        var tagId;\n\n        for (var each in tags) {\n          tagList.push(tags[each].tag)\n          docList.push(each)\n        }\n        \n        postTags.forEach((tag) => {\n          if(tagList.includes(tag)){\n            var idx = tagList.indexOf(tag)\n            database.collection(\"tags\").doc(docList[idx])\n                    .update({\n                              threadIds: firebase.firestore.FieldValue.arrayUnion(postId)\n                          })\n                    .then(() => {\n                              tagId = docList[idx]\n                              dispatch(updateTags(tagId, postId, tag));\n                          })\n                    .catch(error => {\n                        console.log(\"Could not add to the existing tag.\", error);\n                          })\n          }\n          else {\n            const newTag = database.collection(\"tags\").doc()\n            newTag.set({\n                        tag: tag,\n                        threadIds: [postId]\n                      })\n                  .then(() => {\n                        tagId = newTag.id\n                        dispatch(updateTags(tagId,postId,tag));\n                      })\n                  .catch(error => {\n                        console.log(\"Could not add the new tag\");\n                      })\n          }\n      })\n    }\n  }\n\n  export const addPost = (post, tags, threads) => {\n    return dispatch => {\n      const newPost = database.collection(\"threads\").doc();\n        newPost.set(post)\n        .then(() => {\n            dispatch(updateThreads(newPost.id, post));\n            if(post.tags.length !== 0 || (post.tags.length === 1 && post.tags[0]!==\"\")){\n            dispatch(addTags(newPost.id, post.tags, tags))\n            }\n        })\n        .catch(error => {\n          console.log(\"Could not add the post.\", error);\n        })\n    }\n  }","\nimport {useState} from \"react\";\nimport {useSelector,useDispatch} from \"react-redux\";\nimport {  addReply} from \"../redux/actions\";\n\nconst Thread = (props) => {\n\n    const user = useSelector(state => state.user);\n    const [reply, setReply] = useState(\"\");\n    const dispatch = useDispatch();\n    \n    let d = new Date();\n\n    const updateReply = text => {\n        setReply(text);\n    }\n\n    const onSubmit = () => { \n        if (reply.length !== 0){\n            dispatch(addReply({\n                message: reply,\n                date:  d.toDateString().slice(0,-4),\n                author:  user.firstName + \" \" + user.lastName,\n                },props.id));\n            clearForm();\n        }\n    }\n\n    const clearForm = () => {\n        setReply(\"\");\n    }\n\n    return(\n        <div class=\"list-group\">\n        <a href=\"#home\" class=\"list-group-item list-group-item-action post\">\n            <div class=\"d-flex w-100 justify-content-between\">\n            <h5 class=\"mb-1\">{props.post.title}</h5>\n            <small class=\"text-muted\">{props.post.date}</small>\n            </div>\n            <p class=\"mb-1\">{props.post.message}</p>\n            <p class=\"mb-1\">{props.post.tags}</p>\n            <small class=\"text-muted\">{props.post.author}</small>\n        </a>\n        {\n            props.content.map((each) =>\n\n            <a href=\"#home\" class=\"list-group-item list-group-item-action\">\n                <div class=\"d-flex w-100 justify-content-between\">\n                <h6 class=\"mb-1 user\">{each.author}</h6>\n                <small class=\"text-muted\">{each.date}</small>\n                </div>\n                <p class=\"mb-1\">{each.message}</p>\n            </a>\n            )\n        }\n        {(props.loggedIn)?\n        <div class=\"input-group mb-3\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Add a reply\" aria-label=\"Add a reply\" \n            aria-describedby=\"button-addon2\" value={reply} onChange={e => updateReply(e.target.value)}/>\n            <button class=\"btn btn-secondary\" type=\"button\" id=\"button-addon2\" onClick={onSubmit}>Submit</button>\n        </div>:\"\"}\n        </div>\n        \n    )\n}\n\nexport default Thread;","import {useState} from \"react\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport { addPost } from \"../redux/actions\";\n\nconst AddPost = (props) => {\n\n    const threads = useSelector(state => state.threads);\n    const currentTags = useSelector(state => state.tags);\n    const user = useSelector(state => state.user);\n\n    const [title, setTitle] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [tags, setTags] = useState(\"\");\n    const [noTitle, setNoTitle] = useState(false);\n\n    const dispatch = useDispatch();\n\n    let d = new Date();\n\n    const updateTitle = text => {\n        setTitle(text);\n        setNoTitle(false);\n    }\n\n    const updateMessage = text => {\n        setMessage(text);\n    }\n\n    const updateTags = tagsList => {\n        // separate tags by whitespace\n        setTags(tagsList.split(/\\s+/));\n    }\n\n    const onSubmit = () => { \n        if (title.length === 0)\n            {setNoTitle(true);}\n        else {\n            \n            dispatch(addPost({title: title,\n                message: message,\n                tags: tags,\n                date:  d.toDateString().slice(0,-4),\n                author:  user.firstName + \" \" + user.lastName,\n                replies: []}, currentTags, threads));\n            props.updatePost(false)\n            clearForm();\n        }\n    }\n\n    const clearForm = () => {\n        setTitle(\"\");\n        setMessage(\"\");\n        setNoTitle(true);\n    }\n\n    return (\n        <div className=\"container\">\n            <h3>Add a new post</h3>\n            {\n                noTitle ?\n                    <div className=\"alert alert-danger\" role=\"alert\">Please input a Title</div> : \"\"\n            }\n            <div className=\"row my-2\">\n                <label className=\"col-sm-3 col-form-label\" htmlFor=\"selectCategory\">Title:</label>\n                <div className=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Title\" aria-label=\"Title\" aria-describedby=\"basic-addon1\" \n                onChange={e => updateTitle(e.target.value)}/>\n\n                </div>\n            </div>\n            <div className=\"row my-2\">\n                <label className=\"col-sm-3 col-form-label\" htmlFor=\"comment\">Message:</label>\n                <div className=\"col-sm-9\">\n                    <textarea className=\"form-control\" id=\"comment\" \n                        value={message}\n                        onChange={e => updateMessage(e.target.value)} />\n                </div>\n            </div>\n            <div className=\"row my-2\">\n                <label className=\"col-sm-3 col-form-label\" htmlFor=\"selectCategory\">Tags:</label>\n                <div className=\"col-sm-9\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Tags (Every tag starts with a # and multiple tags can be separated by whitespace)\" aria-label=\"Tags\" aria-describedby=\"basic-addon1\" \n                onChange={e => updateTags(e.target.value)}/>\n\n                </div>\n            </div>\n            <div className=\"my-2\">\n                <div className=\"text-end\">\n                    <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>\n                    <button className=\"btn btn-light\" onClick={(e) => props.updatePost(false)}>Cancel</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddPost;","import {useSelector} from \"react-redux\";\nimport {useState} from \"react\"\nimport Thread from \"./Thread\"\nimport AddPost from \"./AddPost\";\n\nconst ThreadList = (props) => {\n    const threads = useSelector(state => state.threads);\n    const threadIds = useSelector(state => state.threadIds);\n    const [current, setCurrent] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [id,setId] = useState(\"\");\n\n    const ids = Object.keys(threads);\n\n    const updateContent = (currentId) => {\n        setCurrent(threads[currentId])\n        setContent(threads[currentId].replies)\n        setId(currentId)\n    }\n\n    return (\n    <div id=\"posts\">\n    <div class=\"grid-container listing\">\n            <div class=\"grid-child list-group\">\n            { \n                ids.map((currentId,i) => \n                    ((threadIds.length === 0) || (threadIds.length>0 && threadIds.includes(currentId)))?\n                    (\n                        <button type=\"button\" class=\"list-group-item list-group-item-action\"\n                        aria-current={(i===0)?\"true\":\"false\"} id={i} onClick={(e) => updateContent(currentId)}>\n                            <div class=\"d-flex w-100 justify-content-between\">\n                            <h5 class=\"mb-1\">{threads[currentId].title}</h5>\n                            <small>{threads[currentId].date}</small>\n                            </div>\n                            <p class=\"mb-1\">{threads[currentId].message.slice(0,120)}</p>\n                            <small>{threads[currentId].author}</small>\n                        </button>\n            ):\"\", threads)\n        }\n        </div>\n        <div class=\"grid-child\">\n            {(props.newPost)?<AddPost newPost={props.newPost} updatePost={props.updatePost}/>\n            :(content)?<Thread post={current} content={content} id={id} loggedIn={props.loggedIn}/>:\"\"}\n        </div>\n    </div>\n    </div>\n    \n    )\n}\n\nexport default ThreadList;","import {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { validateUser,viewOnly } from \"../redux/actions\";\nimport { LOGIN_STATE } from \"../redux/stateConstants\";\n\nlet editingBegun = false;\n\nconst Login = () => {\n    const loginState = useSelector(state => state.loginState);\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const handleLogin = () => {\n        dispatch(validateUser(username, password));\n        clearForm();\n    }\n\n    const handleKeyPress = event => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            handleLogin();\n        }\n    }\n\n    const clearForm = () => {\n        editingBegun = false;\n        setUsername(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <>\n        <div className=\"log-in\">\n            <div className=\"container main my-4\">\n                {\n                    !editingBegun && loginState === LOGIN_STATE.INVALID_LOGIN &&\n                        <div className=\"alert alert-danger\">Invalid username / password! Please try again.</div>\n                }\n                {\n                    !editingBegun && loginState === LOGIN_STATE.NETWORK_ERROR &&\n                        <div className=\"alert alert-danger\">Unable to connect to the server. Please check your internet connection.</div>\n                }\n                <h2 className=\"text-center jobs-font\">The Hogwarts Gazette</h2>\n                <div className=\"row my-4 add-form\">\n                    <div className=\"col-12 col-sm-3\">\n                        <label htmlFor=\"username\" className=\"form-label\">Username:</label>\n                    </div>\n                    <div className=\"col\">\n                        <input type=\"text\" id=\"username\" name=\"username\" \n                            className=\"form-control\"\n                            value={username} onChange={e => {\n                                editingBegun = true;\n                                setUsername(e.target.value);\n                                }}\n                                onKeyUp={e => handleKeyPress(e)}\n                                />\n                    </div>\n                </div>\n                <div className=\"row my-4 add-form\">\n                    <div className=\"col-12 col-sm-3\">\n                        <label htmlFor=\"password\" className=\"form-label\">Password:</label>\n                    </div>\n                    <div className=\"col\">\n                        <input type=\"password\" id=\"password\" name=\"password\"\n                            className=\"form-control\"\n                            value={password} onChange={e => {\n                                    editingBegun = true;\n                                    setPassword(e.target.value);\n                            }}\n                            onKeyUp={e => handleKeyPress(e)}\n                                />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col text-center\">\n                        <button type=\"button\" className=\"btn btn-secondary float-end\" onClick={handleLogin}>\n                            Log in\n                        </button>\n                    </div>\n                </div>\n                <button type=\"button\" class=\"btn unsigned\" onClick={(e) => dispatch(viewOnly(true))}>Continue without signing in</button>\n            </div>\n        </div>\n        \n        </>\n    )\n}\n\nexport default Login;","import { useSelector,useDispatch } from \"react-redux\"\nimport ThreadList from \"../components/ThreadList\"\nimport Login from \"../components/Login\"\nimport { getThreads, getTags, storeThreadIds,logout,viewOnly } from \"../redux/actions\";\nimport { useState } from \"react\";\nimport { INITIAL_STATE, LOGIN_STATE } from \"../redux/stateConstants\";\n\nconst Home = () => {\n    \n    const user = useSelector(state => state.user);\n    const loggedIn = useSelector(state => state.loginState);\n    const isViewOnly = useSelector(state => state.viewOnly);\n    const tags = useSelector(state => state.tags);\n    const threads = useSelector(state => state.threads);\n    const [addPost, setAddPost] = useState(false);\n\n    const ids = Object.keys(tags);\n\n    const dispatch = useDispatch();\n    console.log(\"home tags: \", tags)\n\n    if (threads === INITIAL_STATE.threads){\n        dispatch(getThreads());\n    }\n\n    if (tags === INITIAL_STATE.tags) {\n        dispatch(getTags());\n    }\n    \n    const toggleLogin = () => {\n        (loggedIn === LOGIN_STATE.LOGGED_IN) ?\n        dispatch(logout()):\n        dispatch(viewOnly(false))\n    }\n\n    const handleThread = (id) => {\n        const threadIds = tags[id].threadIds\n        const threadsByTag = []\n        threadIds.forEach(i => {\n            threadsByTag.push(i)\n        });\n        console.log(\"threads by tag: \", threadsByTag)\n        dispatch(storeThreadIds(threadsByTag))\n    }\n\n    const toggleView = () => {\n        dispatch(storeThreadIds([]))\n    }\n\n    if(isViewOnly || loggedIn === LOGIN_STATE.LOGGED_IN) {\n        return(\n            \n            <div id=\"home\">\n                <nav className=\"navbar navbar-dark\">\n                    <div className=\"container-fluid\">\n                        <label class=\"d-flex name\">{(!isViewOnly)?user.firstName:\"\"}</label>\n                        <a className=\"navbar-brand mx-auto font title\" href=\"#home\" onClick={toggleView}>\n                                The Hogwarts Gazette\n                        </a>\n                        <form class=\"d-flex\">\n                        <button type=\"button\" class=\"btn btn-outline-light\" onClick={toggleLogin}>\n                            {(loggedIn !== LOGIN_STATE.LOGGED_IN)? \"Login\":\"Logout\"}\n                        </button>\n                        </form>\n                    </div>\n                </nav>\n                <ul class=\"nav\">\n                    {(loggedIn === LOGIN_STATE.LOGGED_IN)?\n                    <li class=\"nav-item\">\n                        <button type=\"button\" className=\"nav-link active option action\" aria-current=\"page\" value=\"New Post\"\n                        onClick={(e) => setAddPost(true)}>New Post</button>\n                    </li>:\"\"\n                    }\n                    <li class=\"nav-item\">\n                        <a className=\"nav-link tag\" href=\"#home\">tags:</a>\n                    </li>\n                    {\n                    ids.map((id) => \n                        <li class=\"nav-item\">\n                            <button type=\"button\" className=\"nav-link active option\" aria-current=\"page\" value={tags[id].tag}\n                            onClick={(e) => handleThread(id)}>{tags[id].tag}</button>\n                        </li>\n                        , tags)\n                    }\n                </ul>\n                <ThreadList newPost={addPost} updatePost={setAddPost} loggedIn={loggedIn === LOGIN_STATE.LOGGED_IN}/>\n            </div>\n        )\n    }\n    else {\n        return <Login />\n    }\n}\n\nexport default Home","import {Provider} from \"react-redux\"; // Automatically passes the store to all child components\nimport store from \"../redux/store\"; // The store and main reducer\nimport Home from \"../components/Home\";\n\nconst App = () => {\n  \n\n  return (\n  <>\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}